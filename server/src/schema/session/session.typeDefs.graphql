type Session {
    "Session Id (ObjectId)"
    id: String!
    user: User
    userAgent: String
    loggedInAt: Timestamp
}

extend type Query {
    "Get session by Id (ObjectId)"
    session(sessionId: ID!): Session
    "Get sessions by userId (ObjectId)"
    userSessions(userId: ID!): [Session]

    currentUser: User
    currentSession: Session
}

# Inputs

input LogInInput {
    "The users e-mail address"
    email: String!

    "The users password"
    password: String!
}

input LogOutInput {
    "Session to close (log out) (ObjectId)"
    sessionId: ID!
}

input CreateTokenInput {
    "User Id of the desired API user"
    userId: ID!
    "Secret (password) to the API user"
    secret: String!
}

# Payloads

type LogInPayload {
    result: Result!
    user: NormalUser
    sessionId: String
}

type LogOutPayload {
    result: Result!
    user: NormalUser
    sessionId: String
}

type CreateTokenPayload {
    result: Result!
    user: APIUser
    token: String
}

# Mutations

extend type Mutation {
    "Log in normal user"
    logIn(input: LogInInput): LogInPayload
    "Log out normal user"
    logOut(input: LogOutInput): LogOutPayload
    "Create JWT for API user use"
    createToken(input: CreateTokenInput): CreateTokenPayload
}