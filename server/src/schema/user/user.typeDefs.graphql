union User = NormalUser | APIUser

type NormalUser {
    "Unique Id of the user"
    id: ID
    "User's email address"
    email: EmailAddress

    "List of user's permissions"
    permissions: [PERMISSION]

    "Who created this user"
    createdBy: User
    "When was this user created"
    createdAt: DateTime
    "Who updated this user"
    updatedBy: User
    "When was this user updated"
    updatedAt: DateTime
    "Current version (how many user has been updated)"
    version: Int
}

type APIUser {
    "Unique Id of the user"
    id: ID

    "Who created this user"
    createdBy: User
    "When was this user created"
    createdAt: DateTime
    "Who updated this user"
    updatedBy: User
    "When was this user updated"
    updatedAt: DateTime
    "Current version (how many user has been updated)"
    version: Int
}

extend type Query {
    "Get user by Id"
    user(userId: ID!): User
    "Get multiple users"
    users: [User]
}

enum USER_TYPE {
    NORMAL
    API
}

enum PERMISSION {
    ADMIN
}

scalar EmailAddress

# Inputs

input CreateUserInput {
    email: EmailAddress!
    password: String
}

input UpdateUserInput {
    userId: ID!
    email: EmailAddress
    password: String
}

input RegisterInput {
    email: EmailAddress!
    password: String!
}

# Payloads

type CreateUserPayload {
    result: Result!
    user: User
}

type UpdateUserPayload {
    result: Result!
    user: User
}

type DeleteUserPayload {
    result: Result!
}

type RegisterPayload {
    result: Result!
}

# Mutations

extend type Mutation {
    "Create new user"
    createUser(input: CreateUserInput): CreateUserPayload!
    "Update user"
    updateUser(input: UpdateUserInput): UpdateUserPayload!
    "Completely delete user from database"
    deleteUser(userId: ID!): DeleteUserPayload!

    "Register a new user"
    register(input: RegisterInput): RegisterPayload!
}
