type Session {
    "Session Id (ObjectId)"
    id: String!
    "Associated user"
    user: User
    "User-agent used while creating the session"
    userAgent: String
    "Remote host IP address used while creating the seesion"
    userAddress: String
    "Session creation timestamp"
    createdAt: DateTime
    "Session last refresh timestamp"
    updatedAt: DateTime
    "Session refresh count, also equivalent of how many requests were made with the session"
    version: Int
}

extend type Query {
    "Get session by Id (ObjectId)"
    session(sessionId: ID!): Session
    "Get sessions by userId (ObjectId)"
    sessionsByUser(userId: ID!): [Session]

    "Get user from current session"
    currentUser: User
    "Get current session"
    currentSession: Session
}

# Inputs

input LogInInput {
    "The users e-mail address"
    email: EmailAddress!

    "The users password"
    password: String!
}

input CreateTokenInput {
    "User Id of the desired API user"
    userId: ID!
    "Secret (password) to the API user"
    secret: String!
}

# Payloads

type LogInPayload {
    result: Result!
    user: NormalUser
    sessionId: String
}

type LogOutPayload {
    result: Result!
}

type LogOutAllPayload {
    result: Result!
    invalidatedSessions: Int
}

type CreateTokenPayload {
    result: Result!
    user: APIUser
    token: String
}

type DeleteSessionPayload {
    result: Result!
}

type DeleteAllSessionsPayload {
    result: Result!
    invalidatedSessions: Int
}

# Mutations

extend type Mutation {
    "Log in normal user"
    logIn(input: LogInInput): LogInPayload
    "Log out current user out of current session"
    logOut: LogOutPayload
    "Log out current user out of all sessions"
    logOutAll: LogOutAllPayload

    "Create JWT for API user use"
    createToken(input: CreateTokenInput): CreateTokenPayload

    "Delete a specific session"
    deleteSession(sessionId: String): DeleteSessionPayload
    "Delete all sessions for specified user"
    deleteAllSessions(userId: ID): DeleteAllSessionsPayload
}