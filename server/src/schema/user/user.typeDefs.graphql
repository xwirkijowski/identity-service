union User = NormalUser | APIUser

type NormalUser {
    "Unique Id of the user"
    id: ID!
    "User's email address"
    email: String!

    "Who created this user"
    createdBy: User!
    "When was this user created"
    createdAt: Timestamp
    "Who updated this user"
    updatedBy: User
    "When was this user updated"
    updatedAt: Timestamp
    "Current version (how many user has been updated)"
    version: Int
}

type APIUser {
    "Unique Id of the user"
    id: ID!

    "Who created this user"
    createdBy: User!
    "When was this user created"
    createdAt: Timestamp
    "Who updated this user"
    updatedBy: User
    "When was this user updated"
    updatedAt: Timestamp
    "Current version (how many user has been updated)"
    version: Int
}

extend type Query {
    "Get user by Id"
    user(userId: ID!): User
    "Get multiple users"
    users: [User]
}

enum USER_TYPE {
    NORMAL
    API
}

# Inputs

input RegisterInput {
    email: String!
    password: String!
}

# Payloads

type RegisterPayload {
    result: Boolean!
    user: User
}

# Mutations

extend type Mutation {
    register(input: RegisterInput): RegisterPayload!
}
